name: AI PR Description Generator

on:
  pull_request:
    types: [opened, synchronize]

permissions:
  contents: read
  pull-requests: write

jobs:
  generate-pr-description:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get PR diff
        id: diff
        run: |
          # Get the diff for the PR
          git fetch origin ${{ github.base_ref }}
          DIFF=$(git diff origin/${{ github.base_ref }}...HEAD --name-status)
          FILES_CHANGED=$(git diff origin/${{ github.base_ref }}...HEAD --name-only | head -20)
          DETAILED_DIFF=$(git diff origin/${{ github.base_ref }}...HEAD | head -c 10000)

          # Save outputs (escape newlines for GitHub Actions)
          echo "files_changed<<EOF" >> $GITHUB_OUTPUT
          echo "$FILES_CHANGED" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

          echo "diff_summary<<EOF" >> $GITHUB_OUTPUT
          echo "$DIFF" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

          echo "detailed_diff<<EOF" >> $GITHUB_OUTPUT
          echo "$DETAILED_DIFF" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Check if description needs update
        id: check_update
        run: |
          # Check if PR already has our generated description format
          CURRENT_DESCRIPTION=$(gh pr view ${{ github.event.pull_request.number }} --json body --jq '.body')

          if [[ "$CURRENT_DESCRIPTION" == *"## What does this PR do?"* ]]; then
            echo "has_ai_description=true" >> $GITHUB_OUTPUT
          else
            echo "has_ai_description=false" >> $GITHUB_OUTPUT
          fi

          # For synchronize events, only update if there's a significant change
          if [[ "${{ github.event.action }}" == "synchronize" ]]; then
            # Count number of files changed in this push
            FILES_IN_PUSH=$(echo "${{ steps.diff.outputs.files_changed }}" | wc -l)
            if [[ $FILES_IN_PUSH -gt 3 ]]; then
              echo "significant_change=true" >> $GITHUB_OUTPUT
            else
              echo "significant_change=false" >> $GITHUB_OUTPUT
            fi
          else
            echo "significant_change=true" >> $GITHUB_OUTPUT
          fi
        env:
          GH_TOKEN: ${{ github.token }}

      - name: Generate PR description
        id: ai_description
        if: github.event.action == 'opened' || (github.event.action == 'synchronize' && steps.check_update.outputs.has_ai_description == 'true' && steps.check_update.outputs.significant_change == 'true')
        uses: actions/ai-inference@v1
        with:
          model: "gpt-4o"
          prompt: |
            You are a helpful assistant that generates pull request descriptions.

            Based on the following information about a GitHub pull request, generate a comprehensive description in the exact format specified below.

            PR Title: ${{ github.event.pull_request.title }}
            Branch: ${{ github.head_ref }} -> ${{ github.base_ref }}

            Files changed:
            ${{ steps.diff.outputs.files_changed }}

            Diff summary:
            ${{ steps.diff.outputs.diff_summary }}

            Code changes (first 10000 chars):
            ${{ steps.diff.outputs.detailed_diff }}

            Please generate a PR description using EXACTLY this format:

            ## What does this PR do?
            [Add a clear, concise summary of what this PR accomplishes - focus on the business value and user impact]

            ## What tasks were done?
            [Add bullet points of specific technical tasks completed, for example:
            - Updated function signatures in ComponentName
            - Added new interface definitions
            - Fixed bug in specific functionality
            - Added tests for new features]

            ## Images
            [Add screenshots of implemented UI or test output here]


            Closes #[Add related issue number here if you can infer it from the changes, otherwise leave as placeholder]

            Important guidelines:
            - Be specific about what was changed, not just what files were touched
            - Focus on the functional changes, not just file modifications
            - If you can identify patterns in the changes (like bug fixes, new features, refactoring), mention them
            - Keep the summary concise but informative
            - For the tasks section, be specific about what was actually modified/added/removed

      - name: Update PR description
        if: steps.ai_description.outputs.text != ''
        run: |
          gh pr edit ${{ github.event.pull_request.number }} --body "${{ steps.ai_description.outputs.text }}"
        env:
          GH_TOKEN: ${{ github.token }}

      - name: Add comment on significant updates
        if: github.event.action == 'synchronize' && steps.check_update.outputs.has_ai_description == 'true' && steps.check_update.outputs.significant_change == 'true'
        run: |
          gh pr comment ${{ github.event.pull_request.number }} --body "ðŸ¤– PR description has been updated due to significant changes in this push."
        env:
          GH_TOKEN: ${{ github.token }}